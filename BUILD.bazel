load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@fremtind_rules_vitest//vitest:defs.bzl", "vitest_test")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:renovate/package_json.bzl", renovate_bin = "bin")
load("@npm//:web-ext/package_json.bzl", web_ext_bin = "bin")
load("@rules_pkg//pkg/private/zip:zip.bzl", "pkg_zip")
load("bundle.bzl", "extension_bundle")
load("copy_pkg.bzl", "copy_extension_package_to_directory")
load("defs.bzl", "browser", "channel")
load("lit_localize.bzl", "expand_lit_localize_config_templates")

npm_link_all_packages()

extension_bundle(
    name = "webpack_bundle",
)

copy_extension_package_to_directory(
    name = "unpacked_pkg",
    out = "unpacked_pkg",
    webpack_bundle = ":webpack_bundle",
)

pkg_zip(
    name = "pkg_zip",
    srcs = [":unpacked_pkg"],
    out = "twpowertools.zip",
    strip_prefix = "unpacked_pkg",
    visibility = ["//visibility:public"],
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//:__subpackages__"],
)

ts_project(
    name = "vitest_config",
    srcs = ["vitest.config.ts"],
    allow_js = True,
    source_map = True,
    transpiler = "tsc",
    tsconfig = ":tsconfig",
    visibility = ["//:__subpackages__"],
    deps = [
        ":node_modules/@types/node",
        ":node_modules/vitest",
    ],
)

vitest_test(
    name = "test",
    config = "vitest.config.js",
    data = [
        ":node_modules/@material/tooltip",
        ":node_modules/@testing-library/dom",
        ":node_modules/poll-until-promise",
        "//src:compiled_source",
        "//src:non_compiled_source",
        "//src/common/options",
    ],
    node_modules = ":node_modules",
)

browser(
    name = "browser",
    build_setting_default = "CHROMIUM",
)

channel(
    name = "channel",
    build_setting_default = "STABLE",
)

config_setting(
    name = "chromium",
    flag_values = {
        ":browser": "CHROMIUM",
    },
    visibility = ["//:__subpackages__"],
)

config_setting(
    name = "gecko",
    flag_values = {
        ":browser": "GECKO",
    },
    visibility = ["//:__subpackages__"],
)

config_setting(
    name = "stable",
    flag_values = {
        ":channel": "STABLE",
    },
    visibility = ["//:__subpackages__"],
)

config_setting(
    name = "beta",
    flag_values = {
        ":channel": "BETA",
    },
    visibility = ["//:__subpackages__"],
)

config_setting(
    name = "canary",
    flag_values = {
        ":channel": "CANARY",
    },
    visibility = ["//:__subpackages__"],
)

config_setting(
    name = "should_web_ext_lint",
    flag_values = {
        ":browser": "GECKO",
    },
    values = {
        "compilation_mode": "opt",
    },
)

web_ext_bin.web_ext_binary(
    name = "web_ext",
)

sh_test(
    name = "maybe_web_ext_lint",
    size = "small",
    srcs = [":web_ext_lint.sh"],
    args = ["$(location :web_ext)"] + select({
        "//:should_web_ext_lint": [""],
        "//conditions:default": ["DO_NOT_RUN"],
    }),
    data = [
        ":unpacked_pkg",
        ":web_ext",
    ],
    env = {
        "NO_UPDATE_NOTIFIER": "true",
    },
    deps = [
        "@rules_shell//shell/runfiles",
    ],
)

renovate_bin.renovate_config_validator_test(
    name = "renovate_config_test",
    size = "small",
    data = [":renovate.json"],
)

expand_lit_localize_config_templates()

ts_config(
    name = "tsconfig_pkg",
    src = "tsconfig.pkg.json",
    visibility = ["//:__subpackages__"],
    deps = [":tsconfig"],
)

ts_config(
    name = "tsconfig_pkg_js",
    src = "tsconfig.pkg_js.json",
    visibility = ["//:__subpackages__"],
    deps = [":tsconfig"],
)
